XMLHttpRequest (XHR) is an API that can be used by JavaScript, JScript, VBScript, and other web browser scripting languages to transfer and manipulate XML data to and from a webserver using HTTP, establishing an independent connection channel between a webpage's Client-Side and Server-Side
A client event occurs.
XMLHttpRequest object is created.
XMLHttpRequest object is configured.
XMLHttpRequest object makes an asynchronous request to the Webserver.
Webserver returns the result containing XML document.
XMLHttpRequest object calls the callback() function and processes the result.
HTML DOM is updated

A client event occurs
<input type="text" size="20" id="userid" name="id" onkeyup="validateUserId();">.
validateUserId() JavaScript function is mapped as an event handler to an onkeyup event, on input form field whose id is set to "userid"

An XMLHttpRequest object is created
var ajaxRequest;  // The variable that makes Ajax possible!
function ajaxFunction(){
   try{
      
      // Opera 8.0+, Firefox, Safari
      ajaxRequest = new XMLHttpRequest();
   }catch (e){
   
      // Internet Explorer Browsers
      try{
         ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");
      }catch (e) {
      
         try{
            ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
         }catch (e){
            alert("Browser doent support!");
            return false;
         }
      }
   }
}

XMLHttpRequest object is configured.
function validateUserId() {
   ajaxFunction();
   var target;
   // Here processRequest() is the callback function.
   ajaxRequest.onreadystatechange = processRequest;
   
   //XMLHttpRequest object makes an asynchronous request to the Webserver
   if (!target){
   	target = document.getElementById("userid");
   }
   var url = "validate?id=" + escape(target.value);
   
   ajaxRequest.open("GET", url, true);
   ajaxRequest.send(null);
}

Webserver returns the result containing XML document
public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException 
{
   String targetId = request.getParameter("id");
   
   if ((targetId != null) && !accounts.containsKey(targetId.trim()))
   {
      response.setContentType("text/xml");
      response.setHeader("Cache-Control", "no-cache");
      response.getWriter().write("true");
   }
   else
   {
      response.setContentType("text/xml");
      response.setHeader("Cache-Control", "no-cache");
      response.getWriter().write("false");
   }
}

XMLHttpRequest object calls the callback() function and processes the result
The XMLHttpRequest object was configured to call the processRequest() function when there is a state change to the readyState of the XMLHttpRequest object.
Now this function will receive the result from the server and will do the required processing. 
As in the following example, it sets a variable message on true or false based on the returned value from the Webserver
function processRequest() {
   if (req.readyState == 4) {
      if (req.status == 200) {
         var message = "Valid";
...
}

HTML DOM is updated
The HTML page is updated. It happens in the following way:
JavaScript gets a reference to any element in a page using DOM API.
The recommended way to gain a reference to an element is to call.
// where "userIdMessage" is the ID attribute 
// of an element appearing in the HTML document
document.getElementById("userIdMessage"), 

JavaScript may now be used to modify the element's attributes; modify the element's style properties; or add, remove, or modify the child elements.
<script type="text/javascript">
<!--
function setMessageUsingDOM(message) {
   var userMessageElement = document.getElementById("userIdMessage");
   var messageText;
   
   if (message == "false") {
      userMessageElement.style.color = "red";
      messageText = "Invalid User Id";
   }
   else 
   {
      userMessageElement.style.color = "green";
      messageText = "Valid User Id";
   }
   
   var messageBody = document.createTextNode(messageText);
   
   // if the messageBody element has been created simple 
   // replace it otherwise append the new element
   if (userMessageElement.childNodes[0]) {
      userMessageElement.replaceChild(messageBody, userMessageElement.childNodes[0]);
   } 
   else
   {
      userMessageElement.appendChild(messageBody);
   }
}
-->
</script>
<body>
<div id="userIdMessage"><div>
</body>


XMLHttpRequest Methods

abort()
Cancels the current request.

getAllResponseHeaders()
Returns the complete set of HTTP headers as a string.

getResponseHeader( headerName )
Returns the value of the specified HTTP header.

open( method, URL )

open( method, URL, async )

open( method, URL, async, userName )

open( method, URL, async, userName, password )

Specifies the method, URL, and other optional attributes of a request.

The method parameter can have a value of "GET", "POST", or "HEAD". 
Other HTTP methods, such as "PUT" and "DELETE" (primarily used in REST applications) may be possible.

The "async" parameter specifies whether the request should be handled asynchronously or not. 
"true" means that the script processing carries on after the send() method without waiting for a response, 
"false" means that the script waits for a response before continuing script processing.

send( content )
Sends the request.

setRequestHeader( label, value )
Adds a label/value pair to the HTTP header to be sent.

XMLHttpRequest Properties

onreadystatechange
An event handler for an event that fires at every state change.

readyState
The readyState property defines the current state of the XMLHttpRequest object.

The following table provides a list of the possible values for the readyState property:
State 	Description
0 	The request is not initialized.		After you have created the XMLHttpRequest object, but before you have called the open() method.
1 	The request has been set up.	After you have called the open() method, but before you have called send()
2 	The request has been sent.	After you have called send()	
3 	The request is in process.	After the browser has established a communication with the server, but before the server has completed the response.
4 	The request is completed.	After the request has been completed, and the response data has been completely received from the server.

responseText
Returns the response as a string.

responseXML
Returns the response as XML. This property returns an XML document object, which can be examined and parsed using the W3C DOM node tree methods and properties.

status
Returns the status as a number (e.g., 404 for "Not Found" and 200 for "OK").

statusText
Returns the status as a string (e.g., "Not Found" or "OK").

------------------------------------------------
